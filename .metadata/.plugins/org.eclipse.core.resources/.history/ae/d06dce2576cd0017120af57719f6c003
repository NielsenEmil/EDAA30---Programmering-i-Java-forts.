package mountain;

import java.util.LinkedList;

import fractal.Fractal;
import fractal.TurtleGraphics;

public class Mountain extends Fractal {
	private int length;
//	private LinkedList<Side> sides;
	
	public Mountain(int length){
		super();
		this.length = length;
//		sides = new LinkedList<Side>();
	}

	public String getTitle() {
		return "Mountain triangel";
	}

//	public void draw(TurtleGraphics g) {
//		g.moveTo(p1.getX(), p1.getY());
//		g.forwardTo(p2.getX(), p2.getY());
//		g.forwardTo(p3.getX(), p3.getY());
//		g.forwardTo(p1.getX(), p1.getY());
//	}
	
	
	private Point getCenter(Point a, Point b, double dev) {
//		if (!sides.contains(new Side(a, b))) {
			Point p = new Point(a.getX() + (b.getX() - a.getX()) / 2, a.getY() + (b.getY() - a.getY())/2);
//					+ RandomUtilities.randFunc(dev));
//			sides.add(new Side(a, b, p));
			return p;
//		}
//		Side s = new Side(a, b);
//		Point p = sides.get(sides.indexOf(s)).getMid();
//		sides.remove(s);
//		return p;
}
	
	public void draw(TurtleGraphics turtle) {
		Point bottomleft  = new Point(turtle.getWidth() / 2.0 - length / 2.0, turtle.getHeight() / 2.0 + Math.sqrt(3.0) * length / 4.0);
		Point top      = new Point(bottomleft.getX() + 150, bottomleft.getY() + Math.sin(-Math.PI/3)*300);
		Point lowerright = new Point(bottomleft.getX() + 350, bottomleft.getY()+50);

		fractalTriangle(turtle, order, 20.0, bottomleft, top ,lowerright);
}

	/* 
	 * Recursive method: Draws a recursive line of the triangle. 
	 */
	private void fractalTriangle(TurtleGraphics turtle, int order, double dev, Point a, Point b, Point c) {
		if (order == 0) {
			turtle.moveTo(a.getX(), a.getY());
			turtle.forwardTo(b.getX(), b.getY());
			turtle.forwardTo(c.getX(), c.getY());
			turtle.forwardTo(a.getX(), a.getY());
		} else {
			Point q = getCenter(a, b, dev);
			Point r = getCenter(b, c, dev);
			Point s = getCenter(c, a, dev);

			fractalTriangle(turtle, order - 1, dev / 2, a, q, s);
			fractalTriangle(turtle, order - 1, dev / 2, q, b, r);
			fractalTriangle(turtle, order - 1, dev / 2, r, c, s);
			fractalTriangle(turtle, order - 1, dev / 2, s, q, r);
}
	}

}
