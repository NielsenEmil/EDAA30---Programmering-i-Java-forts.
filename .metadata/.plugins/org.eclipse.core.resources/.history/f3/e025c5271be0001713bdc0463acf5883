
public class Sudoku {
	
	public int[][] sudokuMatrix;
	
	
	
	public Sudoku(int[][] input){
		sudokuMatrix = new int[9][9];
		for (int i = 0; i < 9; i++) {
			for (int j = 0; j < 9; j++) {
				sudokuMatrix[i][j] = input[i][j];
			}
		}
	}
	
	
	private boolean solve(int i, int j){
		
		if (sudokuMatrix[i][j] != 0){
			
		}
		
		
		
//		for (int[] a : sudokuMatrix) {
//			for (int b : a){
//				System.out.print(b);
//			}
//			System.out.println();
//		}
		return false;
	}
	
	public boolean isValid(int[][] board, int r, int c) {
	    //check row
	    boolean[] row = new boolean[9];
	    for (int i = 0; i < 9; i++) {
	        if (board[r][i] >= '1' && board[r][i] <= '9') {
	            if (row[board[r][i] - '1'] == false) {
	                row[board[r][i] - '1'] = true;
	            } else {
	                return false;
	            }
	        }
	    }

	    //check column
	    boolean[] col = new boolean[9];
	    for (int i = 0; i < 9; i++) {
	        if (board[i][c] >= '1' && board[i][c] <= '9') {
	            if (col[board[i][c] - '1'] == false) {
	                col[board[i][c] - '1'] = true;
	            } else {
	                return false;
	            }
	        }
	    }

	    //check the 3*3 grid
	    boolean[] grid = new boolean[9];
	    for (int i = (r / 3) * 3; i < (r / 3) * 3 + 3; i++) {
	        for (int j = (c / 3) * 3; j < (c / 3) * 3 + 3; j++) {
	            if (board[i][j] >= '1' && board[i][j] <= '9') {
	                if (grid[board[i][j] - '1'] == false) {
	                    grid[board[i][j] - '1'] = true;
	                } else {
	                    return false;
	                }
	            }
	         }
	    }

	    return true;
	}
	
	public void setValue(int i, int j, int value){
		sudokuMatrix[i][j] = value;
	}
	
	public int getValue(int i, int j){
		return sudokuMatrix[i][j];
	}
	
	public static void main(String[] args) {
		int[][] input = new int[9][9];
		for (int i = 0; i < 9; i++) {
			for (int j = 0; j < 9; j++) {
				input[i][j] = i;
			}
		}
		Sudoku sudoku = new Sudoku(input);
		sudoku.solve(0,0);
	}

}
